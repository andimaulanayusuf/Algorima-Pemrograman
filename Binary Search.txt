Nama	: Andi Maulana Yusuf
Kelas 	: TIF RM 16 B	
Tugas	: Algoritma & Pemrograman 2 (BINARY SEARCH)
NIM	: 16 111 161

BINARY SEARCH

	Binary search adalah metode dari pencarian yang menggunaka konsep membagi 2 jumlah elemen, larik(array) yang telah dientukan. Syarat utama dalam pencarian bagi dua(Binary Search) ialah sekumpulan data atau algoritma yang ingin dicari nanti sudah terurut, baik secara menaik atau menurun.
	Sebuah pencarian biner mencari nilai tengah (median), melakukan sebuah perbandingan untuk menentukan apakah nilai yang dicari ada sebelum atau sesudah nya, kemudian mencari setengan sisanya dengan cara yang sama. pencarian Biner (Binary Search) dilakukan untuk :
- Memperkecil jumlah operasi pembandingan yang harus dilakukan antara data yang dicari dengan data yang ada di dalam tabel, khususnya untuk jumlah data yang sangat besar ukuranya.
- beban komputasi juga lebih kecil karena pencarian dilakukan dari depan, belakang, dan dari tengah.
- Prinsip dasarnya adalah melakukan proses pembagian ruang pencarian secara berulang - ulang sampai data ditemukan atau sampai ruang pencarian tidak dapat dibagi lagi (berarti kemungkinan data tidak ditemukan).
- Syarat utama untuk pencarian biner adalah data di dalam tabel harus sudah terurut.
Kelebihan menggunakan konsep Pencarian bagi dua (Binary Search) dalam pencarian data yaitu waktu yang sangat cepat dalam pencarian.
Dan kekurangan menggunakan konsep binary search yaitu data harus di sorting dahulu dan Algoritma lebih rumit. 
	Langkah Langkah dalam mencari data menggunakan konsep Pencarian bagi dua (Binary Search)
- Berilah  simbol untuk mempermudah dalam memproses data , seperti sekumpulan data dikodekan menjadi n , larik dikodekan L , dan data yang akan dicari dikodekan menjadi X.
-Sepakati bahwa nilai index awal atau kita kodekan menjadi a=0 dan index akhir atau kita kodekan menjadi b=n-1.
-Tentukan apakah sekumpulan data terurut yang akan dicari bersifat menaik atau menurun dengan cara membandingkan elemen kanan dan kiri
-Jika data elemen paling kiri L[0] > data elemen paling kanan L[n-1], maka data terurut tersebut menurun.
-Jika data elemen paling kiri L[0] < data elemen paling kanan L[n-1], maka data terurut tersebut menaik.
-kita beri kode untuk index data tengah sebuah array tersebut dengan variabel c , sehingga : C = (a+b)div 2
-Dari rumus diatas,kita langsung mendapatkan data tengah nya.Lalu periksa apakah L[c] = X , maka data yang dicari langsung didapat dari rumus C diatas.
-Tetapi jika L[c] < X maka pencarian data dilakukan dari sisi kanan index c atau data tengah dengan menggunakan rumus C tersebut.Dan jika L[c] >X maka pencarian data dilakukan dari sisi kiri index c atau data tengah dengan menggunakan rumus C dimana dengan nilai b sama dengan nilai c dan pencarian dilakukan sampai seterusnya hingga ketemu nilai X atau tidak sama sekali. 

Contoh :
Diberikan sebuah data terurut sebanyak 8 elemen L[8] = {2,3,4,5,6,7,8,9}.Tentukanlah nilai X=3 di elemen tersebut ?

Penyelesaian :
-Tentukan apakah data terurut tersebut menaik atau menurun dengan membaca  L[0] dan L[n-1]
L[0] = 2
L[7] = 9 
Karena L[0] < L[7] maka data terurut tersebut Menarik.
-Misalkan index paling kanan a=0 dan index paling kiri b=7 maka index tengahnya adalah :
C = (a+b)div 2 = (0+7)div 2 = 3.
    Dari konsep index C didapat elemen tengah adalah 3 dengan L[3] = 5.
-Karena data index tengah lebih besar dari nilai yang akan dicari (L[3] >X ) maka pencarian data berikutnya dilakukan pada sisi kiri index C dengan syarat nilai index C sama dengan nilai b, sehingga : 
B = C = 3 , C = (a+b)div 2 = (0+3)div 2 = 1.
Elemen tengah menjadi 1 dengan L[1] = 3
-Karena nilai data di elemen tengah sama dengan niali yang dicari atau X maka pencarian berakhir.Data X ditemukan di index ke-1.

Untuk lebih jelasnya lagi perhatikan algoritma deskriptif binary search berikut :
1.Input seluruh data kedalam array
2.Input data yang dicari
3.Tentukan nilai kiri, kanan, dan tengah dengan rumus :
	a.Kiri sama dengan nol
	b.Kanan lebih kecil dari jumlah data
	c.Tengah sama dengan hasil kanan dikurangi hasil kiri dibagi dua.
4.Jika elemen tengah tidak sama dengan data yang dicari, maka :
	a.Jika elemen tengah lebih besar dari data yang dicari, maka pencarian 	dilakukan pada setengah array pertama. Caranya dengan menggunakan perintah 	kiri sama dengan tengah ditambah satu.
	b.Jika elemen tengah lebih kecil dari data yang dicari, maka pencarian 	dilakukan pada setengah array berikutnya. Caranya dengan menggunakan perintah 	kanan sama dengan tengah dikurangi satu.
	c.Tengah sama dengan kiri ditambah (kanan - kiri) dibagi dua.
5.Jika elemen tengah sama dengan data yang dicari, maka data ditemukan. Sedangkan jika elemen tengah tidak sama dengan data yang dicari, maka data tidak ditemukan.


Contoh Kasus Nya :
A{2,5,8,12,15,25,37,57}
Kasus 1  : cari = 12
Loop pertama : Tengah=(BatasAtas + BatasBawah) div 2=( 1 + 8 ) div 2=4
A [Tengah] = A [4] = 12, berarti loop pertama data langsung ditemukan
Kasus 2  : cari = 15
Loop pertama : Tengah=(BatasAtas + BatasBawah) div 2=( 1 +  8 ) div 2=4
A [Tengah] = A [4] = 12 < cari = 15, berarti BatasAtas = Tengah + 1 = 4 + 1 = 5
Loop kedua : Tengah=(BatasAtas + BatasBawah) div 2=( 5 +  8 ) div 2=6
A [Tengah] = A [6] = 25 > cari = 15, berarti BatasBawah = Tengah – 1 = 6 – 1 = 5
Loop ketiga : Tengah=(BatasAtas + BatasBawah) div 2=( 5 +  5 ) div 2=5
A [Tengah] = A [5] = 15, berarti  setelah loop ketiga, data ditemukan
Kasus 3  : cari = 10
Loop pertama : Tengah=(BatasAtas + BatasBawah) div 2=( 1 +  8 ) div 2=4
A [Tengah] = A [4] = 12 > cari = 10, berarti BatasBawah = Tengah – 1 = 4 – 1 = 3
Loop kedua : Tengah=(BatasAtas + BatasBawah) div 2=( 1 +  3 ) div 2=2
A [Tengah] = A [2] = 5 < cari = 10, berarti BatasAtas = Tengah + 1 = 2 + 1 = 3
Loop ketiga : Tengah=(BatasAtas + BatasBawah) div 2=( 3 +  3 ) div 2=3
A [Tengah] = A [3] = 8, berarti  setelah loop ketiga, data tidak ditemukan
Untuk jumlah data sebanyak n, maka proses pembandingan maksimal sebanyak ( log n ) kali. Untuk contoh di atas, jumlah data 8, maka proses pembandingan maksimal sebanyak 3 kali.


dan ini kode program nya :
#include <iostream.h>
#include <conio.h>
#include <stdio.h>
using namespace std;

int main () {
 int n, angka[12], kiri, kanan, tengah, temp, key;
 bool ketemu = false;

 cout<<"Masukan jumlah data : ";
 cin>>n;

 for(int i=0; i<n; i++)
 {
  cout<<"Angka ke - ["<<i<<"] : ";
  cin>>angka[i];
 }
 for (int i=0; i<n; i++)
 {
  for(int j=0; j< n-i-1; j++)
  {
   if(angka [j] > angka [j+1])
   {
    temp=angka[j];
    angka[j]=angka[j+1];
    angka[j+1]=temp;
   }
  }
 }
 cout<<"Data yang telah diurutkan adalah : ";
 for(int i=0; i<n; i++)
 {
  cout<<angka[i]<<" ";
 }
 cout<<"\n Masukan angka yang dicari : ";
 cin>>key;

 kiri=0;
 kanan=n-1;

 while(kiri<=kanan)
 {
  tengah=(kiri + kanan)/2;
  if(key == angka[tengah])
  {
   ketemu=true;
   break;
  }
  else if (key < angka [tengah])
  {
   kanan = tengah -1;
  }
  else
  {
   kiri = tengah +1;
  }
 }
 if (ketemu == true)
  cout<<"Angka ditemukan!";
 else
  cout<<"Angka tidak ditemukan";
  getch();
  return 0;
 }
* saya Pakai Dev C++ buat program nya Pak